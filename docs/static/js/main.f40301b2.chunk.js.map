{"version":3,"sources":["reducers/IsNightReducer.js","hooks/useInput.js","hooks/useDynamicLookAndFeel.js","LookAndFeelRender.js","Controller.js","index.js","contexts/IsNightContext.js"],"names":["INITIAL_STATE","isNight","action","type","Error","useInput","useState","value","setValue","onChange","useCallback","e","target","useMemo","delayedLazy","dynamicImport","lazy","a","async","delay","amount","Promise","resolve","setTimeout","useDynamicLookAndFeel","name","LookAndFeelRender","lookAndFeelNameInput","LookAndFeel","fallback","Controller","useReducer","IsNightReducer","dispatch","toggleIsNight","isNightContextValue","IsNightContext","Provider","ReactDOM","render","document","getElementById","React","createContext"],"mappings":"gMAEaA,EAAgB,CAAEC,SAAS,GAEzB,aAAcC,GAAY,IAAvBD,EAAsB,EAAtBA,QAChB,OAAQC,EAAOC,MACb,IAN4B,mBAO1B,MAAO,CAAEF,SAAUA,GACrB,QACE,MAAM,IAAIG,QCCDC,EANE,WAAO,IAAD,EACOC,qBADP,mBACZC,EADY,KACLC,EADK,KAEbC,EAAWC,uBAAY,SAAAC,GAAC,OAAIH,EAASG,EAAEC,OAAOL,SAAQ,CAACC,IAC7D,OAAOK,mBAAQ,iBAAO,CAAEN,QAAOE,cAAa,CAACF,EAAOE,K,gBCKlDK,EAAc,SAACC,GACjB,OAAOC,gBAAK,oBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACFE,KADE,gCAEDJ,KAFC,yCAMVI,EAAQ,eAACC,EAAD,uDAAU,IAAV,OAAmB,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,OAE7DI,EAnBe,SAACC,GAAD,OAAUZ,mBAAQ,WAC5C,OAAOY,GACH,IAAK,QACD,OAAOX,GAAY,kBAAM,gCAC7B,IAAK,WACL,QACI,OAAOA,GAAY,kBAAM,mCAElC,CAACW,KCYWC,EAjBW,WACtB,IAAMC,EAAuBtB,IACvBuB,EAAcJ,EAAsBG,EAAqBpB,OAE/D,OACI,oCACI,2BAAYoB,EACR,4BAAQpB,MAAM,YAAd,YACA,4BAAQA,MAAM,SAAd,UAEJ,kBAAC,WAAD,CAAUsB,SAAU,4CAChB,kBAACD,EAAD,SCEDE,EAZI,WAAO,IAAD,EACWC,qBAAWC,EAAgBhC,GADtC,mBACZC,EADY,KACZA,QAAWgC,EADC,KAEfC,EAAgBxB,uBAAY,kBAAMuB,EAAS,CAAE9B,KJRvB,uBIQkD,CAAC8B,IACzEE,EAAsBtB,mBAAQ,iBAAO,CAAEZ,UAASiC,mBAAkB,CAACjC,EAASiC,IAElF,OACI,kBAACE,EAAA,EAAeC,SAAhB,CAAyB9B,MAAO4B,GAC5B,kBAAC,EAAD,QCRZG,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U,+BCP1B,oBAEeC,QAAMC,cAAc,CAAE1C,SAAS,EAAOiC,cAAe,kBAAM,S","file":"static/js/main.f40301b2.chunk.js","sourcesContent":["export const TOGGLE_DAY_NIGHT = 'TOGGLE_DAY_NIGHT'\n\nexport const INITIAL_STATE = { isNight: false }\n\nexport default ({ isNight }, action) => {\n  switch (action.type) {\n    case TOGGLE_DAY_NIGHT:\n      return { isNight: !isNight }\n    default:\n      throw new Error();\n  }\n}\n","\n\nimport { useState, useCallback, useMemo } from 'react';\n\nconst useInput = () => {\n    const [value, setValue] = useState();\n    const onChange = useCallback(e => setValue(e.target.value), [setValue]);\n    return useMemo(() => ({ value, onChange }), [value, onChange]);\n};\n\nexport default useInput;\n","import { lazy, useMemo } from 'react';\n\nconst useDynamicLookAndFeel = (name) => useMemo(() => {\n    switch(name) {\n        case 'other':\n            return delayedLazy(() => import('../look-and-feel/other'));\n        case 'original':\n        default:\n            return delayedLazy(() => import('../look-and-feel/original'));\n    }\n}, [name]);\n\nconst delayedLazy = (dynamicImport) => {\n    return lazy(async () => {\n        await delay();\n        return dynamicImport();\n    });\n}\n\nconst delay = (amount = 2000) => new Promise(resolve => setTimeout(resolve, amount));\n\nexport default useDynamicLookAndFeel;\n","import React, { Suspense } from 'react';\n\nimport useInput from 'hooks/useInput';\nimport useDynamicLookAndFeel from 'hooks/useDynamicLookAndFeel';\n\nconst LookAndFeelRender = () => {\n    const lookAndFeelNameInput = useInput();\n    const LookAndFeel = useDynamicLookAndFeel(lookAndFeelNameInput.value);\n\n    return (\n        <>\n            <select {...lookAndFeelNameInput}>\n                <option value=\"original\">Original</option>\n                <option value=\"other\">Outro</option>\n            </select>\n            <Suspense fallback={<div>Loading...</div>}>\n                <LookAndFeel />\n            </Suspense>\n        </>\n    );\n}\n\nexport default LookAndFeelRender","import React, { useReducer, useCallback, useMemo } from 'react';\n\nimport IsNightContext from 'contexts/IsNightContext';\nimport IsNightReducer, { INITIAL_STATE, TOGGLE_DAY_NIGHT } from 'reducers/IsNightReducer';\nimport LookAndFeelRender from 'LookAndFeelRender';\n\nconst Controller = () => {\n    const [{ isNight }, dispatch] = useReducer(IsNightReducer, INITIAL_STATE);\n    const toggleIsNight = useCallback(() => dispatch({ type: TOGGLE_DAY_NIGHT }), [dispatch]);\n    const isNightContextValue = useMemo(() => ({ isNight, toggleIsNight }), [isNight, toggleIsNight]);\n   \n    return (\n        <IsNightContext.Provider value={isNightContextValue}>\n            <LookAndFeelRender />\n        </IsNightContext.Provider>\n    );\n}\n\nexport default Controller","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Controller from 'Controller';\n\nReactDOM.render(\n  <Controller />,\n  document.getElementById('root')\n);\n","import React from 'react';\n\nexport default React.createContext({ isNight: false, toggleIsNight: () => null });\n"],"sourceRoot":""}